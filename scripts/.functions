#!/bin/bash
#
# Bash script helper functions

# Ensure this file is only sourced, not executed
if [[ "${BASH_SOURCE[0]}" -ef "${0}" ]]; then
  exit 1
fi

########################################
# Script
########################################
exit_script() {
  # Declare local variables
  local return_code

  # Initialize local variables
  return_code="1"

  # Input parameter provided
  if [[ -n "${1}" ]]; then
    # Check against valid return codes
    if [[ "${1}" -eq 0 || "${1}" -eq 1 ]]; then
      # Overwrite return code
      return_code="${1}"
    fi
  fi

  # Exit script with return code
  exit "${return_code}"
}

script_filename() {
  # Declare local variables
  local output_filename

  # Initialize local variables
  output_filename="$(basename "${0}")"

  # Return script filename
  echo "${output_filename}"
}

script_directory() {
  # Declare local variables
  local output_directory

  # Initialize local variables
  output_directory="$(dirname "$(readlink -f "${0}")")"

  # Return script directory
  echo "${output_directory}"
}

########################################
# Test
########################################
variable_set() {
  # Declare local variables
  local input_variable

  # Initialize local variables
  input_variable="${1}"

  # Returns 0 if variable is set or error if it is not
  if [[ -n "${input_variable}" ]]; then
    return 0
  else
    return 1
  fi
}

variable_unset() {
  # Declare local variables
  local input_variable

  # Initialize local variables
  input_variable="${*}"

  # Returns 0 if variable is unset or error if it is not
  if [[ -z "${input_variable}" ]]; then
    return 0
  else
    return 1
  fi
}

file_exists() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Returns 0 if file exists or error if it does not
  if [[ -f "${input_file}" ]]; then
    return 0
  else
    return 1
  fi
}

file_dne() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Returns 0 if file does not exist or error if it does
  if [[ ! -f "${input_file}" ]]; then
    return 0
  else
    return 1
  fi
}

file_full() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Returns 0 if file is full or error if it is not
  if [[ -s "${input_file}" ]]; then
    return 0
  else
    return 1
  fi
}

file_empty() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Returns 0 if file is empty or error if it is not
  if [[ ! -s "${input_file}" ]]; then
    return 0
  else
    return 1
  fi
}

directory_exists() {
  # Declare local variables
  local input_directory

  # Initialize local variables
  input_directory="${*}"

  # Returns 0 if directory exists or error if it does not
  if [[ -d "${input_directory}" ]]; then
    return 0
  else
    return 1
  fi
}

directory_dne() {
  # Declare local variables
  local input_directory

  # Initialize local variables
  input_directory="${*}"

  # Returns 0 if directory does not exist or error if it does
  if [[ ! -d "${input_directory}" ]]; then
    return 0
  else
    return 1
  fi
}

path_exists() {
  # Declare local variables
  local input_path

  # Initialize local variables
  input_path="${*}"

  # Returns 0 if path exists or error if it does not
  if [[ -e "${input_path}" ]]; then
    return 0
  else
    return 1
  fi
}

path_dne() {
  # Declare local variables
  local input_path

  # Initialize local variables
  input_path="${*}"

  # Returns 0 if path does not exist or error if it does
  if [[ ! -e "${input_path}" ]]; then
    return 0
  else
    return 1
  fi
}

command_success() {
  # Declare local variables
  local input_command

  # Initialize local variables
  input_command="${*}"

  # Returns 0 if command succeeded or error if not
  if ${input_command}; then
    return 0
  else
    return 1
  fi
}

command_failed() {
  # Declare local variables
  local input_command

  # Initialize local variables
  input_command="${*}"

  # Returns 0 if command failed or error if not
  if ! ${input_command}; then
    return 0
  else
    return 1
  fi
}

is_prompt() {
  # Returns 0 if is a prompt or error if it is not
  if [[ -z "${PS1}" ]]; then
    return 1
  else
    return 0
  fi
}

is_interactive() {
  # Returns 0 if interactive or error if it is not
  if [[ -t 0 || -p /dev/stdin ]]; then
    return 0
  else
    return 1
  fi
}

is_pipe() {
  # Returns 0 if in a pipe or error if it is not
  if [[ -t 1 ]]; then
    return 1
  else
    return 0
  fi
}

has_display() {
  # Returns 0 if have a display or error if it does not
  if [[ -n "${DISPLAY}" ]]; then
    return 0
  else
    # Redundant check if determine DISPLAY variable is not enough
    # if xhost &>/dev/null; then
    #   return 1
    # else
    #   return 0
    # fi
    return 1
  fi
}

is_ssh() {
  # @todo Improve Desktop Client Logic
  # @body Add more checks such as VNC, X-org, etc.
  # Returns 0 if is ssh session or error if it is not
  if [[ -n "${SSH_CLIENT}" ]]; then
    return 0
  else
    return 1
  fi
}

is_installed() {
  # Declare local variables
  local input_application

  # Initialize local variables
  input_application="${1}"

  # Returns 0 if application is installed or error if it is not
  if command -v -- "${input_application}" &>/dev/null; then
    return 0
  else
    return 1
  fi
}

not_installed() {
  # Declare local variables
  local input_application

  # Initialize local variables
  input_application="${1}"

  # Returns 0 if application is not installed or error if it is
  if ! command -v -- "${input_application}" &>/dev/null; then
    return 0
  else
    return 1
  fi
}

is_root() {
  # Check if current user is root
  if [[ "${EUID}" -eq 0 ]]; then
    return 0
  else
    return 1
  fi
}

not_root() {
  # Check if current user is root
  if [[ "${EUID}" -ne 0 ]]; then
    return 0
  else
    return 1
  fi
}

newline_exists() {
  # Declare local variables
  local input_file
  local return_code

  # Initialize local variables
  input_file="${1}"
  return_code="-1"

  # Check file exists
  if file_exists "${input_file}"; then
    # Check if newline exists at eof
    if [[ -s "${input_file}" && -z "$(tail -c 1 "${input_file}")" ]]; then
      return_code="0"
    else
      return_code="1"
    fi
  fi

  # Return 0 if exists, 1 if does not exist, or -1 if file does not exist
  return "${return_code}"
}

newline_dne() {
  # Declare local variables
  local input_file
  local return_code

  # Initialize local variables
  input_file="${1}"
  return_code="-1"

  # Check file exists
  if file_exists "${input_file}"; then
    # Check if newline exists at eof
    if [[ -s "${input_file}" && -z "$(tail -c 1 "${input_file}")" ]]; then
      return_code="1"
    else
      return_code="0"
    fi
  fi

  # Return 0 if does not exist, 1 if exists, or -1 if file does not exist
  return "${return_code}"
}

line_exists() {
  # Declare local variables
  local input_file
  local input_line
  local return_code

  # Initialize local variables
  input_file="${1}"
  # shellcheck disable=SC2124
  input_line="${@:2}"
  return_code="-1"

  # Check grep is installed
  if is_installed grep; then
    # Check file exists
    if file_exists "${input_file}"; then
      # Search for target line
      if grep --line-regexp --max-count=1 -- "${input_line}" "${input_file}" &>/dev/null; then
        return_code="0"
      else
        return_code="1"
      fi
    fi
  fi

  # Return 0 if exists, 1 if does not exist, or -1 if file does not exist or grep not installed
  return "${return_code}"
}

line_dne() {
  # Declare local variables
  local input_file
  local input_line
  local return_code

  # Initialize local variables
  input_file="${1}"
  # shellcheck disable=SC2124
  input_line="${@:2}"
  return_code="-1"

  # Check grep is installed
  if is_installed grep; then
    # Check file exists
    if file_exists "${input_file}"; then
      # Search for target line
      if ! grep --line-regexp --max-count=1 -- "${input_line}" "${input_file}" &>/dev/null; then
        return_code="0"
      else
        return_code="1"
      fi
    fi
  fi

  # Return 0 if exists, 1 if does not exist, or -1 if file does not exist or grep not installed
  return "${return_code}"
}

check_connectivity() {
  # Declare local variables
  local test_address
  local test_count
  local test_timeout
  local return_code

  # Initialize local variables
  if [[ -n "${1}" ]]; then
    test_address="${1}"
  else
    test_address="8.8.8.8"
  fi
  test_count="1"
  test_timeout="5"
  return_code="-1"

  # Test connectivity with ping
  # Check if ping is installed
  if is_installed ping; then
    if ping \
      -c "${test_count}" \
      "${test_address}" \
      &>/dev/null; then
      return_code="0"
    else
      return_code="1"
    fi
  fi

  # Test connectivity with wget if not previously successful
  if [[ "${return_code}" -ne 0 ]]; then
    # Check if wget is installed
    if is_installed wget; then
      if wget \
        --quiet \
        --timeout="${test_timeout}" \
        --tries="${test_count}" \
        --spider \
        "${test_address}" \
        &>/dev/null; then
        return_code="0"
      else
        return_code="1"
      fi
    fi
  fi

  # Test connectivity with curl if not previously successful
  if [[ "${return_code}" -ne 0 ]]; then
    # Check if curl is installed
    if is_installed curl; then
      if curl \
        --silent \
        --connect-timeout "${test_timeout}" \
        --max-time "${test_timeout}" \
        "${test_address}" \
        &>/dev/null; then
        return_code="0"
      else
        return_code="1"
      fi
    fi
  fi

  # Return 0 if connected, 1 if not connected, or -1 if no tools installed
  return "${return_code}"
}

########################################
# Print
########################################
print_stage() {
  # Check for input messages
  if [[ -n "${*}" ]]; then
    # Print header
    echo "------------------------------------------------------------------------"

    # Treat each input parameter as a separate line
    for message_line in "${@}"; do
      echo "   ${message_line}"
    done

    # Print footer
    echo "------------------------------------------------------------------------"
  fi
}

print_step() {
  # Declare local variables
  local message_count

  # Initialize local variables
  message_count="0"

  # Check for input messages
  if [[ -n "${*}" ]]; then
    # Treat each input parameter as a separate line
    for message_line in "${@}"; do
      # Increment message counter
      message_count="$((message_count + 1))"

      # Format based on message count
      if [[ "${message_count}" -eq 1 ]]; then
        echo "=> ${message_line}"
      else
        echo "   ${message_line}"
      fi
    done
  fi
}

########################################
# Abort
########################################
abort_script() {
  # Declare local variables
  local function_total
  local function_name
  local function_count

  # Initialize local variables
  function_total="${#FUNCNAME[@]}"
  function_name=""
  function_count="0"
  space_offset=""

  # Print abort header
  print_stage "Aborting execution of $(script_filename)"

  # Go through function caller trace to identify original function
  for function_name in "${FUNCNAME[@]}"; do
    # Increment function index
    function_count="$((function_count + 1))"

    # Ignore this function
    if [[ "${function_count}" -ne 1 ]]; then
      # Ignore abort functions
      if [[ "${function_name}" != "abort_"* ]]; then
        # Ignore if not actually called from another function
        if [[ "${function_count}" -ne "${function_total}" ]]; then
          # Print function with error
          if [[ -n "${*}" ]]; then
            echo "Error in function ${function_name}:"
            space_offset="  "
          else
            echo "Error in function ${function_name}"
          fi
          break
        fi
      fi
    fi
  done

  # Check for error messages
  if [[ -n "${*}" ]]; then
    # Treat each input parameter as a separate line
    for error_msg in "${@}"; do
      echo "${space_offset}${error_msg}"
    done
  fi

  # Exit script with error
  exit_script "1"
}

abort_variable_set() {
  # Declare local variables
  local input_name
  local input_variable

  # Initialize local variables
  input_name="${1}"
  input_variable="${2}"

  # Check if input variable is set
  if variable_set "${input_variable}"; then
    abort_script "Variable is set!" "${input_name}"
  fi
}

abort_variable_unset() {
  # Declare local variables
  local input_name
  local input_variable

  # Initialize local variables
  input_name="${1}"
  input_variable="${2}"

  # Check if input variable is unset
  if variable_unset "${input_variable}"; then
    abort_script "Variable is unset!" "${input_name}"
  fi
}

abort_file_exists() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Check if input file exists
  if file_exists "${input_file}"; then
    abort_script "File exists!" "${input_file}"
  fi
}

abort_file_dne() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Check if input file does not exist
  if file_dne "${input_file}"; then
    abort_script "File does not exist!" "${input_file}"
  fi
}

abort_file_full() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Check if input file is full
  if file_full "${input_file}"; then
    abort_script "File is full!" "${input_file}"
  fi
}

abort_file_empty() {
  # Declare local variables
  local input_file

  # Initialize local variables
  input_file="${*}"

  # Check if input file is empty
  if file_empty "${input_file}"; then
    abort_script "File is empty!" "${input_file}"
  fi
}

abort_directory_exists() {
  # Declare local variables
  local input_directory

  # Initialize local variables
  input_directory="${*}"

  # Check if input directory exists
  if directory_exists "${input_directory}"; then
    abort_script "Directory exist!" "${input_directory}"
  fi
}

abort_directory_dne() {
  # Declare local variables
  local input_directory

  # Initialize local variables
  input_directory="${*}"

  # Check if input directory does not exist
  if directory_dne "${input_directory}"; then
    abort_script "Directory does not exist!" "${input_directory}"
  fi
}

abort_path_exists() {
  # Declare local variables
  local input_path

  # Initialize local variables
  input_path="${*}"

  # Check if input path exists
  if path_exists "${input_path}"; then
    abort_script "Path exists!" "${input_path}"
  fi
}

abort_path_dne() {
  # Declare local variables
  local input_path

  # Initialize local variables
  input_path="${*}"

  # Check if input path does not exist
  if path_dne "${input_path}"; then
    abort_script "Path does not exist!" "${input_path}"
  fi
}

abort_command_success() {
  # Declare local variables
  local input_command

  # Initialize local variables
  input_command="${*}"

  # Check if input command success
  if command_success "${input_command}"; then
    abort_script "Command execution success!" "${input_command}"
  fi
}

abort_command_failed() {
  # Declare local variables
  local input_command

  # Initialize local variables
  input_command="${*}"

  # Check if input command failed
  if command_failed "${input_command}"; then
    abort_script "Command execution failure!" "${input_command}"
  fi
}

abort_is_installed() {
  # Declare local variables
  local input_application

  # Initialize local variables
  input_application="${1}"

  # Check if input application is installed
  if is_installed "${input_application}"; then
    abort_script "Application is installed!" "${input_application}"
  fi
}

abort_not_installed() {
  # Declare local variables
  local input_application

  # Initialize local variables
  input_application="${1}"

  # Check if input application is not installed
  if not_installed "${input_application}"; then
    abort_script "Application not installed!" "${input_application}"
  fi
}

abort_check_connectivity() {
  # Declare local variables
  local input_address

  # Initialize local variables
  input_address="${1}"

  # Check if input application is not installed
  if ! check_connectivity "${input_address}"; then
    abort_script "Failed to connect to address!" "${input_address}"
  fi
}

########################################
# Sudo
########################################
sudoers_filename() {
  # Declare local variables
  local output_filename

  # Initialize local variables
  output_filename="${USER}-$(script_filename)"

  # Return sudoers filename
  echo "${output_filename}"
}

sudoers_directory() {
  # Declare local variables
  local output_directory

  # Initialize local variables
  output_directory="/etc/sudoers.d"

  # Return sudoers directory
  echo "${output_directory}"
}

sudoers_filepath() {
  # Declare local variables
  local output_filepath

  # Initialize local variables
  output_filepath="$(sudoers_directory)/$(sudoers_filename)"

  # Return sudoers filepath
  echo "${output_filepath}"
}

has_sudoers() {
  # Check for the existence of the temporary sudoers file
  if directory_exists "$(sudoers_directory)"; then
    if file_exists "$(sudoers_filepath)"; then
      if file_full "$(sudoers_filepath)"; then
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  else
    return 1
  fi
}

add_sudoers() {
  # Declare local variables
  local application_list
  local found_application
  local path_list
  local new_sudoers
  local existing_sudoers

  # Initialize local variables
  application_list=(
    cp
    mv
    rm
    mkdir
    chmod
    usermod
    tee
    apt
    apt-get
    desktop-file-install
    update-desktop-database
    systemd-hwdb
    infocmp
    tic
  )
  found_application=""
  path_list=""
  new_sudoers=""
  existing_sudoers=""

  # Check that at least one application was provided
  if [[ -n "${application_list[0]}" ]]; then
    # Loop through all applications in the list
    for current_application in "${application_list[@]}"; do
      # Find path to current application
      found_application="$(command -v -- "${current_application}")"
      # Check that application was found
      if [[ "${found_application}" != "" ]]; then
        # Append to path list
        path_list="${path_list} ${found_application}"
      else
        # Append to path list, hopefully sudoers will still work without the full application path
        path_list="${path_list} ${current_application}"
      fi
    done

    new_sudoers="${USER} $(hostname) = NOPASSWD:${path_list}"

    # Check if existing temporary sudoers file
    if has_sudoers; then
      # Get existing temporary sudoers file content
      existing_sudoers="$(cat "$(sudoers_filepath)")"
      if [[ "${existing_sudoers}" == "${new_sudoers}" ]]; then
        # Existing temporary sudoers file matches
        return 0
      else
        # Remove temporary sudoers file
        if ! sudo rm -f "$(sudoers_filepath)"; then
          return 1
        fi

        # Create new temporary sudoers file
        echo "${new_sudoers}" |
          if sudo tee "$(sudoers_filepath)" &>/dev/null; then
            return 0
          else
            return 1
          fi
      fi
    else
      # Create temporary sudoers file
      echo "${new_sudoers}" |
        if sudo tee "$(sudoers_filepath)" &>/dev/null; then
          return 0
        else
          return 1
        fi
    fi
  else
    return 1
  fi
}

remove_sudoers() {
  # Check if existing temporary sudoers file
  if ! has_sudoers; then
    return 0
  else
    # Remove temporary sudoers file
    if ! sudo rm "$(sudoers_filepath)"; then
      return 1
    fi

    # Invalidate cached user credentials
    if sudo -k; then
      return 0
    else
      return 1
    fi
  fi
}

get_sudo() {
  if not_root; then
    if ! add_sudoers; then
      abort_script "Failed to add sudo permissions!"
    fi
  fi
}

clear_sudo() {
  if not_root; then
    if ! remove_sudoers; then
      abort_script "Failed to remove sudo permissions!" \
        "Please manually delete file" \
        "$(sudoers_filepath)"
    fi
  fi
}

########################################
# Root
########################################
root_command() {
  # Declare local variables
  local input_command

  # Initialize local variables
  input_command="${*}"

  # Check if input file variable is set
  abort_variable_unset "input_command" "${input_command}"

  # Copy input file as as root
  if is_root; then
    if ! ${input_command}; then
      return 1
    fi
  else
    # shellcheck disable=SC2086
    if ! sudo ${input_command}; then
      return 1
    fi
  fi
}

root_copy() {
  # Declare local variables
  local input_file
  local output_file

  # Initialize local variables
  input_file="${1}"
  output_file="${2}"

  # Check if input file variable is set
  abort_variable_unset "input_file" "${input_file}"

  # Check if input file is not missing
  abort_file_dne "${input_file}"

  # Check if output file variable is set
  abort_variable_unset "output_file" "${output_file}"

  # Copy input file as as root
  if is_root; then
    if ! cp -f "${input_file}" "${output_file}"; then
      return 1
    fi
  else
    if ! sudo cp -f "${input_file}" "${output_file}"; then
      return 1
    fi
  fi
}

root_owner() {
  # Declare local variables
  local input_path

  # Initialize local variables
  input_path="${*}"

  # Check if input path variable is set
  abort_variable_unset "input_path" "${input_path}"

  # Check if input path is not missing
  abort_path_dne "${input_path}"

  # Set input path owner to root
  if is_root; then
    if ! chown root:root "${input_path}"; then
      return 1
    fi

  else
    if ! sudo chown root:root "${input_path}"; then
      return 1
    fi
  fi
}

########################################
# Permissions
########################################
check_permissions() {
  # Declare local variables
  local input_permission
  local input_path
  local test_file
  local test_permission

  # Initialize local variables
  input_permission="${1}"
  input_path="${2}"
  test_file=""
  test_permission=""

  # Check if input variables are set
  abort_variable_unset "input_permission" "${input_permission}"
  abort_variable_unset "input_path" "${input_path}"

  # Check if input path is not missing
  abort_path_dne "${input_path}"

  # Check if provided path is a directory or file
  if directory_exists "${input_path}"; then
    # Check permissions of all files in directory
    find "${input_path}" -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' test_file; do
      # Check if test variable is set
      abort_variable_unset "test_file" "${test_file}"

      # Check for valid file in directory before proceeding
      abort_file_dne "${test_file}"

      # Get current test file permissions
      test_permission="$(stat -L -c "%a" "${test_file}")"

      # Check if test variable is set
      abort_variable_unset "test_permission" "${test_permission}"

      # Check if current file has the expected permission
      if [[ "${test_permission}" -ne "${input_permission}" ]]; then
        # Exit as soon as a permission mis-match is found and throw an error return code
        return 1
        break
      fi
    done
  else
    # Get current test file permissions
    test_permission="$(stat -L -c "%a" "${input_path}")"

    # Check if test variable is set
    abort_variable_unset "test_permission" "${test_permission}"

    # Check if input file has the expected permission
    if [[ "${test_permission}" -ne "${input_permission}" ]]; then
      # Permission mis-match is found and throw an error return code
      return 1
    fi
  fi
}

set_permissions() {
  # Declare local variables
  local input_permission
  local input_path
  local test_file
  local test_permission
  local return_code

  # Initialize local variables
  input_permission="${1}"
  input_path="${2}"
  test_file=""

  # Check if input variables are set
  abort_variable_unset "input_permission" "${input_permission}"
  abort_variable_unset "input_path" "${input_path}"

  # Check if input path is not missing
  abort_path_dne "${input_path}"

  # Check if provided path is a directory or file
  if directory_exists "${input_path}"; then
    # Check file permissions
    if check_permissions "${input_permission}" "${input_path}"; then
      print_step "Skipped: ${input_path}"
    else
      # Check permissions of all files in directory
      find "${input_path}" -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' test_file; do
        # Check if current file has the expected permission
        if ! check_permissions "${input_permission}" "${test_file}"; then
          # Permission mis-match is found, update permissions
          chmod "${input_permission}" "${test_file}"
          print_step "Modified: ${test_file}"
        fi
      done
    fi
  else
    # Check if input file has the expected permission
    if check_permissions "${input_permission}" "${input_path}"; then
      print_step "Skipped: ${input_path}"
    else
      # Permission mis-match is found, update permissions
      chmod "${input_permission}" "${input_path}"
      print_step "Modified: ${input_path}"
    fi
  fi
}

########################################
# Files
########################################
prepend_line() {
  # Declare local variables
  local input_file
  local input_argument
  local argument_count
  local argument_minimum
  local has_newline
  local prepend_text

  # Initialize local variables
  input_file="${1}"
  input_argument=""
  argument_count="${#}"
  argument_minimum="2"
  has_newline="true"
  prepend_text=""

  # Check if input file variable is set
  abort_variable_unset "input_file" "${input_file}"

  # Check for arguments
  if (("${argument_count}" >= "${argument_minimum}")); then
    # Check if file exists
    if file_exists "${input_file}"; then
      # Check if newline at eof
      if newline_dne "${input_file}"; then
        # Set newline flag for later reference
        has_newline="false"
      fi
    else
      # Create file
      touch "${input_file}"

      # Set newline flag for later reference
      has_newline="false"
    fi

    # Loop through arguments in reverse
    for ((input_argument = "${argument_count}"; input_argument >= "${argument_minimum}"; input_argument--)); do
      # Join arguments into single text variable (faster than writing to the file multiple times)
      prepend_text="${!input_argument}\n${prepend_text}"
    done

    # Check if newline at eof needs to be skipped
    if [[ "${has_newline}" == "false" ]]; then
      # Prepend text to file and skip newline
      echo -e -n "${prepend_text}$(cat "${input_file}")" >"${input_file}"
    else
      # Prepend text to file
      echo -e "${prepend_text}$(cat "${input_file}")" >"${input_file}"
    fi
  fi
}

append_line() {
  # Declare local variables
  local input_file
  local input_argument
  local argument_count
  local argument_minimum
  local has_newline

  # Initialize local variables
  input_file="${1}"
  input_argument=""
  argument_count="${#}"
  argument_minimum="2"
  has_newline="true"

  # Check if input file variable is set
  abort_variable_unset "input_file" "${input_file}"

  # Check for arguments
  if (("${argument_count}" >= "${argument_minimum}")); then
    # Check if file exists
    if file_exists "${input_file}"; then
      # Check if newline at eof
      if newline_dne "${input_file}"; then
        # Set newline flag for later reference
        has_newline="false"

        # Append newline to avoid writing to existing line
        echo "" >>"${input_file}"
      fi
    fi

    # Loop through arguments in reverse
    for ((input_argument = "${argument_minimum}"; input_argument <= "${argument_count}"; input_argument++)); do
      # Check if newline at eof needs to be skipped
      if [[ "${has_newline}" == "false" && "${input_argument}" -eq "${argument_count}" ]]; then
        # Append text to file and skip newline
        echo -n "${!input_argument}" >>"${input_file}"
      else
        # Append text to file
        echo "${!input_argument}" >>"${input_file}"
      fi
    done
  fi
}

########################################
# Checksum
########################################
checksum_file() {
  # Declare local variables
  local input_file
  local computed_checksum

  # Initialize local variables
  input_file="${*}"
  computed_checksum=""

  # Check if input file variable is set
  abort_variable_unset "input_file" "${input_file}"

  # Check if input file is not missing
  abort_file_dne "${input_file}"

  # Check if input file is not empty
  abort_file_empty "${input_file}"

  # Calculate checksum
  computed_checksum="$(cksum "${input_file}" | cut -d' ' -f1)"

  # Return calculation result
  echo "${computed_checksum}"
}

########################################
# Git
########################################
git_up-to-date() {
  # Declare local variables
  local input_path

  # Initialize local variables
  input_path="${*}"

  abort_not_installed "git"
  abort_variable_unset "input_path" "${input_path}"
  abort_directory_dne "${input_path}"

  git -C "${input_path}" fetch &>/dev/null

  if [[ "$(git -C "${input_path}" rev-parse HEAD)" == "$(git -C "${input_path}" rev-parse "@{u}")" ]]; then
    return 0
  else
    return 1
  fi
}

git_update() {
  # Declare local variables
  local input_repo
  local input_path
  local input_name

  # Initialize local variables
  input_repo="${1}"
  input_path="${2}"
  input_name="${3}"

  abort_variable_unset "input_repo" "${input_repo}"
  abort_variable_unset "input_path" "${input_path}"
  abort_variable_unset "input_name" "${input_name}"

  if directory_exists "${input_path}"; then
    if git_up-to-date "${input_path}"; then
      print_step "Skipped: Updating ${input_name} repo"
    else
      print_step "Updating ${input_name} repo"
      git -C "${input_path}" pull
    fi
  else
    print_step "Cloning ${input_name} repo"
    mkdir -p "${input_path}"
    git clone "${input_repo}" "${input_path}"
  fi
}
